<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FAQNABOT</name>
    </assembly>
    <members>
        <member name="T:FAQNABOT.AdaptiveCardHelpers.WelcomeCard">
            <summary>
            The necessary class to generate the welcome card.
            </summary>
        </member>
        <member name="T:FAQNABOT.Bots.FAQNABot">
            <summary>
            This is the bot class.
            </summary>
        </member>
        <member name="M:FAQNABOT.Bots.FAQNABot.OnMessageActivityAsync(Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IMessageActivity},System.Threading.CancellationToken)">
            <summary>
            The method that gets invoked each time there is a message that is coming in.
            </summary>
            <param name="turnContext">The current turn.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A unit of execution.</returns>
        </member>
        <member name="M:FAQNABOT.Bots.FAQNABot.OnMembersAddedAsync(System.Collections.Generic.IList{Microsoft.Bot.Schema.ChannelAccount},Microsoft.Bot.Builder.ITurnContext{Microsoft.Bot.Schema.IConversationUpdateActivity},System.Threading.CancellationToken)">
            <summary>
            The method that gets invoked when the bot is first opened after installation.
            </summary>
            <param name="membersAdded">The account that has been eiter added or interacting with the bot.</param>
            <param name="turnContext">The current turn/execution flow.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A unit of execution.</returns>
        </member>
        <member name="M:FAQNABOT.Bots.FAQNABot.CreateAdaptiveCardAttachment(System.String)">
            <summary>
            Creates the adaptive card for the team welcome message.
            </summary>
            <param name="filePath">Parses the Adaptive Card Json Path.</param>
            <returns>The Welcome Adaptive card.</returns>
        </member>
        <member name="M:FAQNABOT.Bots.FAQNABot.GetMessageFromText(Microsoft.Bot.Builder.ITurnContext,System.String)">
            <summary>
            Sends the Appropriate Card to the user parsing the text.
            </summary>
            <param name="context">The current turn/execution flow.</param>
            <param name="text">Parses the text from user conversation.</param>
            <returns>Approrpriate Card.</returns>
        </member>
        <member name="T:FAQNABOT.ConfigurationCredentialProvider">
            <summary>
            The credentials provider class.
            </summary>
        </member>
        <member name="M:FAQNABOT.ConfigurationCredentialProvider.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:FAQNABOT.ConfigurationCredentialProvider"/> class.
            </summary>
            <param name="configuration">Contains necessary credential properties.</param>
        </member>
        <member name="T:FAQNABOT.Controllers.BotController">
            <summary>
            This ASP Controller is created to handle a request. Dependency Injection will provide the Adapter and IBot
            implementation at runtime. Multiple different IBot implementations running at different endpoints can be
            achieved by specifying a more specific type for the bot constructor argument.
            </summary>
        </member>
        <member name="M:FAQNABOT.Controllers.BotController.#ctor(Microsoft.Bot.Builder.Integration.AspNet.Core.IBotFrameworkHttpAdapter,Microsoft.Bot.Builder.IBot)">
            <summary>
            Initializes a new instance of the <see cref="T:FAQNABOT.Controllers.BotController"/> class.
            </summary>
            <param name="adapter">Bot framework adapter.</param>
            <param name="bot">The bot itself.</param>
        </member>
        <member name="M:FAQNABOT.Controllers.BotController.PostAsync">
            <summary>
            The main invocation point for the bot.
            </summary>
            <returns>A unit of execution.</returns>
        </member>
        <member name="T:FAQNABOT.Program">
            <summary>
            The main class which represents the main execution point.
            </summary>
        </member>
        <member name="M:FAQNABOT.Program.Main(System.String[])">
            <summary>
            The main method of execution.
            </summary>
            <param name="args">The command line arguments.</param>
        </member>
        <member name="M:FAQNABOT.Program.CreateWebHostBuilder(System.String[])">
            <summary>
            The web host builder interface implementation.
            </summary>
            <param name="args">The command line arguments.</param>
            <returns>The web host builder.</returns>
        </member>
        <member name="T:FAQNABOT.Startup">
            <summary>
            The startup class.
            </summary>
        </member>
        <member name="M:FAQNABOT.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:FAQNABOT.Startup"/> class.
            </summary>
            <param name="configuration">The configuration parameter.</param>
        </member>
        <member name="P:FAQNABOT.Startup.Configuration">
            <summary>
            Gets the configuration properties.
            </summary>
        </member>
        <member name="M:FAQNABOT.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Method that will configure the necessary services.
            </summary>
            <param name="services">All of the necessary items.</param>
        </member>
        <member name="M:FAQNABOT.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Configure method override which will be called at the runtime.
            </summary>
            <param name="app">The application builder.</param>
            <param name="env">The hosting environment.</param>
        </member>
    </members>
</doc>
