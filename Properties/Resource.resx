<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AskAnExpertFunctionText" xml:space="preserve">
    <value>You can always ask me to connect to an expert, an expert will connect with you:\n Ask an Expert.</value>
    <comment>Letting the user to know about Ask an Expert service.</comment>
  </data>
  <data name="AskAnExpertText1" xml:space="preserve">
    <value>Ask An Expert</value>
    <comment>Title of the Ask An Expert Card.</comment>
  </data>
  <data name="AskAnExpertText2" xml:space="preserve">
    <value>We have our experts to assist you better  on any of your questions.\nYou can always say:\nAsk an Expert</value>
    <comment>Helps the user in understandig, there is an expert team to connect to.</comment>
  </data>
  <data name="BotName" xml:space="preserve">
    <value>FAQ Bot</value>
    <comment>Name of the BOT</comment>
  </data>
  <data name="BulletedList" xml:space="preserve">
    <value>- 401k\r- Travel Benifits\r-  Leave Policy\r- Health Benifits</value>
    <comment>Bullet List of Available Bot Services</comment>
  </data>
  <data name="BulletedQuestionText" xml:space="preserve">
    <value>- May I know my 401k policy?\n- May I know the Travel Policy of the org?\n-  What about the Leave Policy?\n- What are the Health benefits?</value>
    <comment>Possible questions to be asked by the user to the bot.</comment>
  </data>
  <data name="CollectFeedback" xml:space="preserve">
    <value>Answer the questions suggesting how we can improve our services or just leave the comments.</value>
    <comment>Providing the user with set of questions or comment box  to collect feedback.</comment>
  </data>
  <data name="FeedbackText1" xml:space="preserve">
    <value>We Would love to hear a feedback from you on how we have performed today.</value>
    <comment>Text suggests that user is invited to share his feedback on his expereince using bot.</comment>
  </data>
  <data name="FeedbackText2" xml:space="preserve">
    <value>If your experience is unhappy give us the details you have for your question,like your assigned ticket #, one of our experts will connect with you.</value>
    <comment>Asking user for details of his ticket in the event of bad experience or unresolved issues.</comment>
  </data>
  <data name="FunctionCardText1" xml:space="preserve">
    <value>Hello!.I am your friendly HR Question and Answer BOT. \nType anything related to HR topics and see how I answer them back.</value>
    <comment>Explains what bot does and possible questions.</comment>
  </data>
  <data name="FunctionCardText2" xml:space="preserve">
    <value>You can ask me questions on the following topics and I will assist you in answering them.</value>
    <comment>Suggests the User to ask Question</comment>
  </data>
  <data name="FunctionTopicsText" xml:space="preserve">
    <value>Ask me questions  like:</value>
    <comment>Title Text for the Questions to be asked.</comment>
  </data>
  <data name="MessageText1" xml:space="preserve">
    <value>Here is what I can help you with:</value>
    <comment>MessageLine</comment>
  </data>
  <data name="MessageText2" xml:space="preserve">
    <value>If you are curious about what I can do, just type @FAQBot and I will present the list of commands that I can understand.</value>
    <comment>Message Line to know more about the Bot Functionalities</comment>
  </data>
  <data name="ShareFeedbackTitleText" xml:space="preserve">
    <value>Share Feedback</value>
    <comment>Title for Feedback card</comment>
  </data>
  <data name="TakeATourButtonText" xml:space="preserve">
    <value>Take a tour</value>
    <comment>Action Button which gives Tour for Bot Functionalities.</comment>
  </data>
  <data name="WelcomeText1" xml:space="preserve">
    <value>Hi there!</value>
    <comment>Greeting Text of Adaptive Card</comment>
  </data>
  <data name="WelcomeText2" xml:space="preserve">
    <value>Hello!   \nI am Sophia I am your friendly HR BOT. I am here to help you with your HR realted topics.</value>
    <comment>Explains What Bot it is.</comment>
  </data>
</root>